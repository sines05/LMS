/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lms.gui.internalframe;

import lms.gui.dialog.JDialogBorrowBooks;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.JTextComponent;
import lms.gui.JFrameMainSLM;
import lms.model.Student;
import lms.util.AutoSearch;
import lms.util.ComboBoxList;
import lms.util.NumberInput;
import lms.util.QueryLMS;

/**
 *
 * @author Aldrin
 */
public class JInternalFrameBorrowedBooks extends javax.swing.JInternalFrame implements MouseListener {

    private JFrameMainSLM mainFrame;
    private QueryLMS query = new QueryLMS();
    private Student student = new Student();
    private JTextComponent comboBoxEditor;

    /**
     * Creates new form JInternalFrameBooksList
     */
    public JInternalFrameBorrowedBooks() {
        initComponents();
    }

    public JInternalFrameBorrowedBooks(String title, boolean resizable, boolean closable, boolean maximizable, boolean iconifiable, lms.gui.JFrameMainSLM mainFrame) {

        setRootPane(createRootPane());
        setLayout(new BorderLayout());
        this.title = title;
        this.resizable = resizable;
        this.closable = closable;
        this.maximizable = maximizable;
        isMaximum = true;
        this.iconable = iconifiable;
        isIcon = false;
        setRootPaneCheckingEnabled(true);
        desktopIcon = new JDesktopIcon(this);
        updateUI();
        sun.awt.SunToolkit.checkAndSetPolicy(this);
        this.mainFrame = mainFrame;
        initComponents();
        selectedSearch();
        comboStudent();
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                //Publisher
                jComboBoxStudent.setEditable(true);
                comboBoxEditor = (JTextComponent) jComboBoxStudent.getEditor().getEditorComponent();
                comboBoxEditor.setDocument(new AutoSearch(jComboBoxStudent));
                comboBoxEditor.addKeyListener(new KeyAdapter() {
                    @Override
                    public void keyPressed(KeyEvent e) {
                        if (jComboBoxStudent.isDisplayable()) {
                            jComboBoxStudent.setPopupVisible(true);
                        }
                        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                            jComboBoxStudentKeyPressed(e);
                        }
                    }
                });

            }
        });
        new NumberInput().intValidator(jTextFieldBarcode);
        setTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldSearch = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldBarcode = new javax.swing.JTextField();
        jCheckBoxName = new javax.swing.JCheckBox();
        jCheckBoxBarcode = new javax.swing.JCheckBox();
        jComboBoxStudent = new javax.swing.JComboBox<>();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setMaximizable(true);
        setTitle("Books List");
        setFocusable(false);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(0, 102, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(204, 204, 204)));
        jPanel2.setPreferredSize(new java.awt.Dimension(1308, 40));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("   Borrowed Book Informations");
        jPanel2.add(jLabel1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(748, 65));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel5.setPreferredSize(new java.awt.Dimension(450, 100));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Search");
        jPanel5.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, -1, 30));

        jTextFieldSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldSearch.setPreferredSize(new java.awt.Dimension(200, 30));
        jTextFieldSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldSearchMouseClicked(evt);
            }
        });
        jTextFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchActionPerformed(evt);
            }
        });
        jTextFieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSearchKeyReleased(evt);
            }
        });
        jPanel5.add(jTextFieldSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, -1, -1));

        jPanel4.add(jPanel5, java.awt.BorderLayout.EAST);

        jPanel6.setPreferredSize(new java.awt.Dimension(550, 72));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jLabel3.setText("Student");
        jPanel6.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 3, 70, 30));

        jTextFieldBarcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldBarcodeKeyPressed(evt);
            }
        });
        jPanel6.add(jTextFieldBarcode, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 27, 290, 30));

        buttonGroup1.add(jCheckBoxName);
        jCheckBoxName.setText("Name");
        jCheckBoxName.setFocusable(false);
        jCheckBoxName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxNameActionPerformed(evt);
            }
        });
        jPanel6.add(jCheckBoxName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 42, 80, 15));

        buttonGroup1.add(jCheckBoxBarcode);
        jCheckBoxBarcode.setSelected(true);
        jCheckBoxBarcode.setText("Barcode");
        jCheckBoxBarcode.setFocusable(false);
        jCheckBoxBarcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxBarcodeActionPerformed(evt);
            }
        });
        jPanel6.add(jCheckBoxBarcode, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 27, 80, 15));

        jComboBoxStudent.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxStudent.setFocusable(false);
        jComboBoxStudent.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxStudentItemStateChanged(evt);
            }
        });
        jComboBoxStudent.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBoxStudentPropertyChange(evt);
            }
        });
        jComboBoxStudent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBoxStudentKeyPressed(evt);
            }
        });
        jPanel6.add(jComboBoxStudent, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 27, 290, 30));

        jPanel4.add(jPanel6, java.awt.BorderLayout.WEST);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jScrollPane1.setFocusable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setFocusable(false);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1054, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchKeyReleased
        String text = jTextFieldSearch.getText().trim();
        if (text.length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text + ",*"));
        }
    }//GEN-LAST:event_jTextFieldSearchKeyReleased

    private void jCheckBoxBarcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxBarcodeActionPerformed
        selectedSearch();
    }//GEN-LAST:event_jCheckBoxBarcodeActionPerformed

    private void jCheckBoxNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxNameActionPerformed
        selectedSearch();
    }//GEN-LAST:event_jCheckBoxNameActionPerformed

    private void jComboBoxStudentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxStudentItemStateChanged

    }//GEN-LAST:event_jComboBoxStudentItemStateChanged

    private void jTextFieldBarcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBarcodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String b = jTextFieldBarcode.getText();
            if (b.isEmpty()) {
                return;
            } else {
                Long barcode = Long.parseLong(jTextFieldBarcode.getText());
                student.setBarcode(barcode);
                student = query.selectStudentDataByBarcode(student);
                comboStudent();
                for (ComboBoxList a : this.query.getList()) {
                    a.setSelectedId(query.getList(), String.valueOf(this.student.getId()), jComboBoxStudent);
                }
            }
            if (student.getLastname() == null) {
                jTextFieldBarcode.setText("");
                return;
            } else {
                JDialogBorrowBooks bb = new JDialogBorrowBooks(mainFrame, true, student);
                bb.setVisible(true);
            }
            jTextFieldBarcode.setText("");
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
        setTable();
        jTextFieldSearch.setFocusable(false);


    }//GEN-LAST:event_jTextFieldBarcodeKeyPressed

    private void jComboBoxStudentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxStudentKeyPressed
        int n = jComboBoxStudent.getSelectedIndex();
        if (jComboBoxStudent.getSelectedIndex() == 0) {
            return;
        }
        ComboBoxList studentIdl = (ComboBoxList) this.jComboBoxStudent.getSelectedItem();
        student.setId(Integer.parseInt(studentIdl.getId()));
        if (studentIdl.getId().toString() == null) {
            JOptionPane.showMessageDialog(mainFrame, "No selected student!!", "Message", JOptionPane.PLAIN_MESSAGE);
            if (student.getBarcode().equals("1")) {
                jTextFieldBarcode.setText("");
            }
            jTextFieldBarcode.setText("");

            return;
        } else {
            student = query.selectStudentData(student);
            selectStudentBookBorrewed(student.getId());
            jTextFieldBarcode.setText(String.valueOf(student.getBarcode()));
            JDialogBorrowBooks bb = new JDialogBorrowBooks(mainFrame, true, student);
            bb.setVisible(true);

        }
        if (jTextFieldBarcode.getText().equals("1")) {
            jTextFieldBarcode.setText("");
        }
        if (jTable1.getRowCount() < 1) {
        } else {
        }
        comboStudent();
        selectStudentBookBorrewed(student.getId());

    }//GEN-LAST:event_jComboBoxStudentKeyPressed

    private void jComboBoxStudentPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBoxStudentPropertyChange

    }//GEN-LAST:event_jComboBoxStudentPropertyChange

    private void jTextFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchActionPerformed
        jTextFieldSearch.setFocusable(true);
    }//GEN-LAST:event_jTextFieldSearchActionPerformed

    private void jTextFieldSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldSearchMouseClicked
        jTextFieldSearch.setFocusable(true);
    }//GEN-LAST:event_jTextFieldSearchMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox jCheckBoxBarcode;
    private javax.swing.JCheckBox jCheckBoxName;
    private javax.swing.JComboBox<Object> jComboBoxStudent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldBarcode;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables
       DefaultTableModel tableModel = new DefaultTableModel() {
        public Class getColumnClass(int columnIndex) {
            if (columnIndex == 0) {
                return String.class;
            }
            switch (columnIndex) {
                case 1:
                    return Integer.class;
                case 2:
                    return String.class;
                case 3:
                    return String.class;
                case 4:
                    return String.class;
                case 5:
                    return String.class;
                case 6:
                    return String.class;
                case 7:
                    return String.class;
                case 8:
                    return String.class;
                case 9:
                    return String.class;
                case 10:
                    return Integer.class;
                case 11:
                    return Integer.class;

                default:
                    return String.class;
            }
        }

        public boolean isCellEditable(int row, int col) {
            return false;
        }

    };

    private TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tableModel);

    public void setTable() {
        try {
            Vector<String> colname = new Vector<String>();
            colname.add("Id");
            colname.add("ISBN-13");
            colname.add("Student");
            colname.add("Title/Book");
            colname.add("Author");
            colname.add("Publisher");
            colname.add("Description");
            colname.add("Notes");
            colname.add("Subjects");
            colname.add("URL");
            colname.add("Quantity");
            colname.add("Price");//11
            colname.add("Genre");
            colname.add("Call No");
            colname.add("PriceNF");//14

            ArrayList v1 = new QueryLMS().selectBooksBorrowed();
            Vector vector = new Vector(v1);
            jTable1 = new JTable(tableModel);
            JTableHeader header = jTable1.getTableHeader();
            header.setPreferredSize(new Dimension(100, 45));
            header.setFont(new Font("Courier New", Font.PLAIN, 14));
            header.setBackground(new java.awt.Color(153, 153, 153));
            jTable1.setRowSorter(sorter);
            jTable1.addMouseListener(this);
            jTable1.setFont(new Font("Courier New", Font.PLAIN, 14));
            tableModel.setDataVector(vector, colname);
            jScrollPane1.setViewportView(jTable1);

            TableColumn[] column = new TableColumn[100];
            column[0] = jTable1.getColumnModel().getColumn(0);
            column[0].setPreferredWidth(0);
            column[1] = jTable1.getColumnModel().getColumn(1);
            column[1].setPreferredWidth(100);
            column[2] = jTable1.getColumnModel().getColumn(2);//title
            column[2].setPreferredWidth(140);
            column[3] = jTable1.getColumnModel().getColumn(3);//title
            column[3].setPreferredWidth(300);
//            column[3] = jTable1.getColumnModel().getColumn(3);//
//            column[3].setPreferredWidth(220);
            column[14] = jTable1.getColumnModel().getColumn(14);
            column[14].setPreferredWidth(180);

            TableColumn hidden = jTable1.getColumnModel().getColumn(0);
            hidden.setMinWidth(0);
            hidden.setPreferredWidth(0);
            hidden.setMaxWidth(0);
            TableColumn hidden1 = jTable1.getColumnModel().getColumn(1);
            hidden1.setMinWidth(0);
            hidden1.setPreferredWidth(0);
            hidden1.setMaxWidth(0);
            TableColumn hidden8 = jTable1.getColumnModel().getColumn(8);
            hidden8.setMinWidth(0);
            hidden8.setPreferredWidth(0);
            hidden8.setMaxWidth(0);
            TableColumn hidden9 = jTable1.getColumnModel().getColumn(9);
            hidden9.setMinWidth(0);
            hidden9.setPreferredWidth(0);
            hidden9.setMaxWidth(0);
            TableColumn hidden2 = jTable1.getColumnModel().getColumn(14);
            hidden2.setMinWidth(0);
            hidden2.setPreferredWidth(0);
            hidden2.setMaxWidth(0);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void mouseClicked(MouseEvent e) {
        if (e.getSource() == jTable1) {
            if (e.getButton() == MouseEvent.BUTTON1) {
                if (e.getClickCount() == 1) {
                    int row = jTable1.getSelectedRow();
                    if (row != -1) {

                        Object idl = jTable1.getValueAt(row, 0);
                        Object isbnl = jTable1.getValueAt(row, 1);
                        Object typel = jTable1.getValueAt(row, 2);
                        Object genrel = jTable1.getValueAt(row, 3);
                        Object descriptionl = jTable1.getValueAt(row, 4);
                        Object pricel = jTable1.getValueAt(row, 13);

                    }

                }
            }

        }
    }

    public void mousePressed(MouseEvent e) {
    }

    public void mouseReleased(MouseEvent e) {
    }

    public void mouseEntered(MouseEvent e) {
    }

    public void mouseExited(MouseEvent e) {
    }

    private void selectedSearch() {
        if (jCheckBoxBarcode.isSelected() == true) {
            jTextFieldBarcode.setVisible(true);
            jTextFieldBarcode.setFocusable(true);
            jComboBoxStudent.setFocusable(false);
            jComboBoxStudent.setVisible(false);
        } else {
            jTextFieldBarcode.setVisible(false);
            jTextFieldBarcode.setFocusable(false);
            jComboBoxStudent.setFocusable(true);
            jComboBoxStudent.setVisible(true);
        }
    }

    private void comboStudent() {
        this.jComboBoxStudent.removeAllItems();
        this.jComboBoxStudent.addItem("");
        query.comboBoxStudent();
        for (ComboBoxList a : query.getList()) {
            this.jComboBoxStudent.addItem(a);
        }
    }

    private void selectStudentBookBorrewed(int studentId) {
        tableModel.setRowCount(0);
        query.selectBorrowedBooks(studentId);
        for (int i = 0; i < query.getData().size(); i++) {
            tableModel.addRow((Vector) query.getData().get(i));
        }
    }

}
