/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lms.gui.dialog;

import java.awt.AlphaComposite;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.sql.Blob;
import java.text.DecimalFormat;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.JTextComponent;
import lms.model.BookBorrow;
import lms.model.Student;
import lms.util.NumberInput;
import lms.util.QueryLMS;

/**
 *
 * @author Aldrin
 */
public class JDialogBorrowBooks extends javax.swing.JDialog implements MouseListener {

    private QueryLMS query = new QueryLMS();
    private JTextComponent comboBoxEditor;
    private lms.gui.JFrameMainSLM mainFrame;
    private lms.model.Student student = new Student();
    int IMG_WIDTH = 140;
    int IMG_HEIGHT = 140;
    private lms.model.Book book = new lms.model.Book();
    private DecimalFormat df = new DecimalFormat("##,##0.00");
    private static boolean multipleBook;
    private BookBorrow bookBorrow = new BookBorrow();
    private static Boolean bookReadyToReturn = false;

    /**
     * Creates new form JDialogBorrowBooks
     */
    public JDialogBorrowBooks(lms.gui.JFrameMainSLM parent, boolean modal, lms.model.Student student) {
        super(parent, modal);
        initComponents();
        this.student = student;
        this.mainFrame = parent;
        jLabelStudentName.setText(this.student.getLastname() + ", " + this.student.getFirstname() + " " + this.student.getMiddlename().substring(0, 1) + ".");
        jLabelCourse.setText(this.student.getCourse().getCourse());
        jLabelGender.setText(this.student.getGender());
        jLabelAddress.setText(this.student.getAddress());
        setTable();
        displayPicture();
        selectStudentBookBorrewed(student.getId());
        setTablePenalties();
        selectStudentPenalties(student.getId());
        calculateTotalPenalty();
        payPenaltyButtonEnableOrDisable();
        new NumberInput().intValidator(jTextFieldISBN);

    }

    public JDialogBorrowBooks(boolean bookReadyToReturn) {
        setBookReadyToReturn(bookReadyToReturn);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelAddress = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabelPicture = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabelStudentName = new javax.swing.JLabel();
        jLabelCourse = new javax.swing.JLabel();
        jLabelGender = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldISBN = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonManual = new javax.swing.JButton();
        jButtonPayPenalty = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabelTotalPenalties = new javax.swing.JLabel();

        setTitle("Student Borrow Books");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 153)), "Student Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Courier New", 1, 14), new java.awt.Color(0, 102, 153))); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Address");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, 70, 25));

        jLabelAddress.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jLabelAddress.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelAddress.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabelAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 110, 230, 25));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabelPicture.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        jLabelPicture.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPicture.setText("No Photo");
        jLabelPicture.setFocusable(false);
        jPanel2.add(jLabelPicture, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 140, 140));

        jLabel5.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Gender");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 70, 25));

        jLabel6.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Course");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, 70, 25));

        jLabel7.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Student");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 70, 25));

        jLabelStudentName.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jLabelStudentName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelStudentName.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabelStudentName, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 230, 25));

        jLabelCourse.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jLabelCourse.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelCourse.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabelCourse, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 50, 230, 25));

        jLabelGender.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jLabelGender.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelGender.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabelGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 80, 230, 25));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 9, 470, 180));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 153)), "Borrowed Books", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Courier New", 0, 14), new java.awt.Color(0, 102, 153))); // NOI18N
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jLabel4.setText("ISBN");
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 50, 29));

        jTextFieldISBN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldISBNActionPerformed(evt);
            }
        });
        jTextFieldISBN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldISBNKeyPressed(evt);
            }
        });
        jPanel4.add(jTextFieldISBN, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 260, 30));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setFocusable(false);
        jScrollPane1.setViewportView(jTable1);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 930, 300));

        jButtonManual.setMnemonic('R');
        jButtonManual.setText("Manual");
        jButtonManual.setFocusable(false);
        jButtonManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonManualActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonManual, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 20, 100, 30));

        jButtonPayPenalty.setMnemonic('R');
        jButtonPayPenalty.setText("<html><center>Pay<br><p style=\"font-weight: bold; color: red;padding-top: 0px;\">Penalty</p></center></html>");
        jButtonPayPenalty.setFocusable(false);
        jButtonPayPenalty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPayPenaltyActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonPayPenalty, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 15, 90, 40));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 950, 380));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 153)), "Penalties", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Courier New", 1, 14), new java.awt.Color(0, 102, 153))); // NOI18N
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.BorderLayout());

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel6.setPreferredSize(new java.awt.Dimension(10, 30));
        jPanel6.setRequestFocusEnabled(false);
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabel2.setText("Total");
        jPanel6.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 0, 190, 30));

        jLabelTotalPenalties.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        jLabelTotalPenalties.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jPanel6.add(jLabelTotalPenalties, new org.netbeans.lib.awtextra.AbsoluteConstraints(345, 0, 110, 30));

        jPanel5.add(jPanel6, java.awt.BorderLayout.SOUTH);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 9, 470, 180));

        setSize(new java.awt.Dimension(983, 615));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonManualActionPerformed
        JDialogManualEntry manual = new JDialogManualEntry(mainFrame, true, student);
        manual.setVisible(true);
        String isbn = manual.getIsbn();

        if (isbn == null) {
            return;
        } else {
            boolean old = false;
            book.setIsbn(isbn);
            book = query.selectBookByISBN(book);
            if (jTable1.getRowCount() == 0) {
                tableModel.addRow(new Object[]{book.getId(), book.getPublisher().getId(), book.getIsbn(), 1, book.getTitle(), book.getAuthorsName(), book.getPublisher().getName(), book.getDescription(), book.getNotes(), book.getSubjects(), book.getPrice(), df.format(book.getPrice()), old});
            } else {
                if (getBookReadyToReturn() == true) {

                } else {
                    for (int i = 0; i < jTable1.getRowCount(); i++) {
                        String isbnl = (String) jTable1.getValueAt(i, 2);
                        if (isbnl.equals(book.getIsbn().toString())) {
                            setMultipleBook(true);
                            JOptionPane.showMessageDialog(mainFrame, "One book is only allowed.", "Error adding book!!", JOptionPane.PLAIN_MESSAGE);
                            jTextFieldISBN.setText("");
                            return;
                        }
                    }
                }

                if (isMultipleBook() == false) {
                    tableModel.addRow(new Object[]{book.getId(), book.getPublisher().getId(), book.getIsbn(), 1, book.getTitle(), book.getAuthorsName(), book.getPublisher().getName(), book.getDescription(), book.getNotes(), book.getSubjects(), book.getPrice(), df.format(book.getPrice()), old});
                }
                setMultipleBook(false);
            }
        }
        if (jTable1.getRowCount() > 0) {
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                Object stat = jTable1.getValueAt(i, 12);
                if ((boolean) stat == false) {
                } else {
                }
            }
        }
        selectStudentBookBorrewed(student.getId());
        selectStudentPenalties(student.getId());
        calculateTotalPenalty();
        payPenaltyButtonEnableOrDisable();
        jTextFieldISBN.setText("");

    }//GEN-LAST:event_jButtonManualActionPerformed

    private void jTextFieldISBNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldISBNActionPerformed

    }//GEN-LAST:event_jTextFieldISBNActionPerformed

    private void jTextFieldISBNKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldISBNKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addToTable();
            selectStudentBookBorrewed(student.getId());
            calculateTotalPenalty();
            payPenaltyButtonEnableOrDisable();
            jTextFieldISBN.setText("");
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
        selectStudentBookBorrewed(student.getId());
        selectStudentPenalties(student.getId());
    }//GEN-LAST:event_jTextFieldISBNKeyPressed

    private void jButtonPayPenaltyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPayPenaltyActionPerformed
        Double total = calculateTotalPenalty();
        JDialogPaymentCalculator paymentCalculator = new JDialogPaymentCalculator(mainFrame, true, total);
        paymentCalculator.setVisible(true);
        if (paymentCalculator.getPay() == true) {
            for (int i = 0; i < jTable2.getRowCount(); i++) {
                Integer bookBorrowedId = (Integer) jTable2.getValueAt(i, 0);
                bookBorrow.setId(bookBorrowedId);
                query.addPenaltyPayment(bookBorrow);
            } 
            jLabelTotalPenalties.setText("0.00");
        }
        selectStudentPenalties(student.getId());
        paymentCalculator.setPay(false);
        payPenaltyButtonEnableOrDisable();
    }//GEN-LAST:event_jButtonPayPenaltyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonManual;
    private javax.swing.JButton jButtonPayPenalty;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelAddress;
    private javax.swing.JLabel jLabelCourse;
    private javax.swing.JLabel jLabelGender;
    private javax.swing.JLabel jLabelPicture;
    private javax.swing.JLabel jLabelStudentName;
    private javax.swing.JLabel jLabelTotalPenalties;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextFieldISBN;
    // End of variables declaration//GEN-END:variables
    private boolean confirm(String confirmMessage) {
        int ans = JOptionPane.showConfirmDialog(this, confirmMessage, "CONFIRMATION", JOptionPane.YES_NO_OPTION);
        return (ans == JOptionPane.YES_OPTION);
    }

    //table 2
    public DefaultTableModel tableModel = new DefaultTableModel() {
        public Class getColumnClass(int columnIndex) {
            if (columnIndex == 0) {
                return String.class;
            }
            switch (columnIndex) {
                case 1:
                    return Integer.class;
                case 2:
                    return String.class;
                case 3:
                    return Integer.class;
                case 4:
                    return String.class;
                case 5:
                    return String.class;
                case 6:
                    return String.class;
                case 7:
                    return String.class;
                case 8:
                    return String.class;
                case 9:
                    return String.class;
                case 10:
                    return String.class;
                case 11:
                    return Integer.class;
                case 12:
                    return Boolean.class;
                default:
                    return String.class;
            }
        }

        public boolean isCellEditable(int row, int col) {
            if (col < 10) {
                return false;

            } else {
                return true;
            }
        }
    };
    private TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tableModel);

    public void setTable() {
        try {
            String[] columnNames = {
                "Book Id",//
                "Publisher Id",//1
                "ISBN",//2
                "Quatity",//3
                "Title",//4
                "Authors",//5
                "Publisher",//6
                "Description",//7
                "Notes",//8
                "Subjects",//9
                "PriceF", //10
                "Price",//11
                "Old"

            };//15

            jTable1 = new javax.swing.JTable(tableModel);
            JTableHeader header = jTable1.getTableHeader();
            header.setPreferredSize(new Dimension(100, 35));
            header.setFont(new Font("Courier New", Font.PLAIN, 14));
            header.setBackground(new java.awt.Color(153, 153, 153));
            jTable1.setRowSorter(sorter);
            jTable1.addMouseListener(this);
            jTable1.setRowHeight(30);
            jTable1.setFont(new Font("Courier New", Font.PLAIN, 14));
//            jTable1.setCellSelectionEnabled(true);
            jTable1.setFocusable(false);
            for (int i = 0; i < columnNames.length;) {
                tableModel.addColumn(columnNames[i]);
                i++;
            }

            jScrollPane1.setViewportView(jTable1);

            TableColumn[] column = new TableColumn[100];

            column[0] = jTable1.getColumnModel().getColumn(0);
            column[0].setPreferredWidth(40);

            column[1] = jTable1.getColumnModel().getColumn(1);
            column[1].setPreferredWidth(50);

            column[2] = jTable1.getColumnModel().getColumn(2);
            column[2].setPreferredWidth(90);

            column[3] = jTable1.getColumnModel().getColumn(3);
            column[3].setPreferredWidth(100);

            column[3] = jTable1.getColumnModel().getColumn(4);
            column[3].setPreferredWidth(300);

            column[4] = jTable1.getColumnModel().getColumn(5);
            column[4].setPreferredWidth(400);

            column[5] = jTable1.getColumnModel().getColumn(6);
            column[5].setPreferredWidth(150);

            column[7] = jTable1.getColumnModel().getColumn(7);
            column[7].setPreferredWidth(140);

            column[11] = jTable1.getColumnModel().getColumn(11);
            column[11].setPreferredWidth(100);

            TableColumn hidden1 = jTable1.getColumnModel().getColumn(0);
            hidden1.setMinWidth(0);
            hidden1.setPreferredWidth(0);
            hidden1.setMaxWidth(0);
            TableColumn hidden2 = jTable1.getColumnModel().getColumn(1);
            hidden2.setMinWidth(0);
            hidden2.setPreferredWidth(0);
            hidden2.setMaxWidth(0);
            TableColumn hidden3 = jTable1.getColumnModel().getColumn(2);
            hidden3.setMinWidth(0);
            hidden3.setPreferredWidth(0);
            hidden3.setMaxWidth(0);
            TableColumn hidden4 = jTable1.getColumnModel().getColumn(10);
            hidden4.setMinWidth(0);
            hidden4.setPreferredWidth(0);
            hidden4.setMaxWidth(0);
            TableColumn hidden5 = jTable1.getColumnModel().getColumn(8);
            hidden5.setMinWidth(0);
            hidden5.setPreferredWidth(0);
            hidden5.setMaxWidth(0);
            TableColumn hidden6 = jTable1.getColumnModel().getColumn(9);
            hidden6.setMinWidth(0);
            hidden6.setPreferredWidth(0);
            hidden6.setMaxWidth(0);
            TableColumn hidden7 = jTable1.getColumnModel().getColumn(12);
            hidden7.setMinWidth(0);
            hidden7.setPreferredWidth(0);
            hidden7.setMaxWidth(0);
            TableColumn hidden8 = jTable1.getColumnModel().getColumn(3);
            hidden8.setMinWidth(0);
            hidden8.setPreferredWidth(0);
            hidden8.setMaxWidth(0);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void mouseClicked(MouseEvent e) {
        if (e.getSource() == jTable1) {
            if (e.getButton() == MouseEvent.BUTTON1) {
                if (e.getClickCount() == 1) {
                    int row = jTable1.getSelectedRow();
                    if (row != -1) {
                        Object studentIdl = jTable1.getValueAt(row, 0);
                        Boolean oldl = (Boolean) jTable1.getValueAt(row, 12);
                        if (oldl == true) {
                        } else {
                        }

                    }
                }
            }

        }
    }

    public void mousePressed(MouseEvent e) {
    }

    public void mouseReleased(MouseEvent e) {
    }

    public void mouseEntered(MouseEvent e) {
    }

    public void mouseExited(MouseEvent e) {
    }

    private void displayPicture() {
        try {
            Blob blobImage = (Blob) query.selectedStudentPicture(student);
            ImageIcon icon = new ImageIcon(blobImage.getBytes(1L, (int) blobImage.length()));

            Image image = icon.getImage();
            int type = BufferedImage.TYPE_INT_ARGB;

            BufferedImage resizedImage = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, type);
            Graphics2D g = resizedImage.createGraphics();
            g.drawImage(image, 0, 0, IMG_WIDTH, IMG_HEIGHT, null);
            g.dispose();
            g.setComposite(AlphaComposite.Src);

            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                    RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            g.setRenderingHint(RenderingHints.KEY_RENDERING,
                    RenderingHints.VALUE_RENDER_QUALITY);
            g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
            jLabelPicture.setText("");
            jLabelPicture.setIcon(new ImageIcon(resizedImage));//image to label

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @return the multipleBook
     */
    public static boolean isMultipleBook() {
        return multipleBook;
    }

    /**
     * @param aMultipleBook the multipleBook to set
     */
    public static void setMultipleBook(boolean aMultipleBook) {
        multipleBook = aMultipleBook;
    }

    private void addBookToBorrow() {
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            Object isbnl = jTable1.getValueAt(i, 2);
            book.setIsbn(isbnl.toString());
            bookBorrow.setStudent(student);
            bookBorrow.setBook(book);
            query.addBookBorrowed(bookBorrow);
        }
    }

    private void selectStudentBookBorrewed(int studentId) {
        tableModel.setRowCount(0);
        query.selectBorrowedBooks(studentId);
        for (int i = 0; i < query.getData().size(); i++) {
            tableModel.addRow((Vector) query.getData().get(i));
        }
    }

    private void addToTable() {
        book.setIsbn(jTextFieldISBN.getText());
        book = query.selectBookByISBN(book);
        if(book.getId()==null){
          JOptionPane.showMessageDialog(null, "The barcode did not match to any book. Please try again.", "Invalid barcode!!", JOptionPane.WARNING_MESSAGE);
            return;   
        }
        lms.model.BookBorrow bb = query.selectBookIdStudentId(student.getId(), book.getId());
        if (bb.getId() == null) {
            //Borrow Book
            JDialogConfirmBorrowBook borrowBook = new JDialogConfirmBorrowBook(mainFrame, true, student, book);
            borrowBook.setVisible(true);
            selectStudentPenalties(student.getId());

        } else {
            //Return Book
            JDialogConfirmReturnBook returnBook = new JDialogConfirmReturnBook(mainFrame, true, student, book);
            returnBook.setVisible(true);
            selectStudentPenalties(student.getId());

        }

    }

    private void removeRowIfDuplicate() {
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            String isbnl = (String) jTable1.getValueAt(i, 2);
            if (isbnl.equals(book.getIsbn().toString())) {
                setMultipleBook(true);
                JOptionPane.showMessageDialog(mainFrame, "One book is only allowed.", "Error adding book!!", JOptionPane.PLAIN_MESSAGE);
                jTextFieldISBN.setText("");
                return;
            }
        }
    }

    //table 2
    public DefaultTableModel tableModel2 = new DefaultTableModel() {
        public Class getColumnClass(int columnIndex) {
            if (columnIndex == 0) {
                return String.class;
            }
            switch (columnIndex) {
                case 1:
                    return String.class;
                case 2:
                    return Integer.class;
                case 3:
                    return Integer.class;
                case 4:
                    return Integer.class;
                default:
                    return String.class;
            }
        }

        public boolean isCellEditable(int row, int col) {
            if (col < 10) {
                return false;

            } else {
                return true;
            }
        }
    };
    private TableRowSorter<TableModel> sorter2 = new TableRowSorter<TableModel>(tableModel2);

    public void setTablePenalties() {
        try {
            String[] columnNames = {
                "Book Borrowed Id",//
                "Title",//1
                "Days",//2
                "Rate",//3
                "Penalty",//4
            };//15

            jTable2 = new javax.swing.JTable(tableModel2);
            JTableHeader header = jTable2.getTableHeader();
            header.setPreferredSize(new Dimension(100, 35));
            header.setFont(new Font("Courier New", Font.PLAIN, 14));
            header.setBackground(new java.awt.Color(153, 153, 153));
            jTable2.setRowSorter(sorter2);
            jTable2.addMouseListener(this);
            jTable2.setRowHeight(30);
            jTable2.setFont(new Font("Courier New", Font.PLAIN, 14));
//            jTable1.setCellSelectionEnabled(true);
            jTable2.setFocusable(false);
            for (int i = 0; i < columnNames.length;) {
                tableModel2.addColumn(columnNames[i]);
                i++;
            }

            jScrollPane2.setViewportView(jTable2);

            TableColumn[] column = new TableColumn[100];

            column[0] = jTable2.getColumnModel().getColumn(0);
            column[0].setPreferredWidth(40);

            column[1] = jTable2.getColumnModel().getColumn(1);
            column[1].setPreferredWidth(250);

            column[2] = jTable2.getColumnModel().getColumn(2);
            column[2].setPreferredWidth(80);

            column[3] = jTable2.getColumnModel().getColumn(3);
            column[3].setPreferredWidth(80);

            column[3] = jTable2.getColumnModel().getColumn(4);
            column[3].setPreferredWidth(100);

            TableColumn hidden1 = jTable2.getColumnModel().getColumn(0);
            hidden1.setMinWidth(0);
            hidden1.setPreferredWidth(0);
            hidden1.setMaxWidth(0);
//            TableColumn hidden2 = jTable2.getColumnModel().getColumn(1);
//            hidden2.setMinWidth(0);
//            hidden2.setPreferredWidth(0);
//            hidden2.setMaxWidth(0);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void selectStudentPenalties(int studentId) {
        tableModel2.setRowCount(0);
        query.selectStudentPenalties(studentId);
        for (int i = 0; i < query.getData().size(); i++) {
            tableModel2.addRow((Vector) query.getData().get(i));
        }
    }

    private Double calculateTotalPenalty() {
        Double sum = 0.0;
        Double penalty = 0.0;
        try {
            for (int i = 0; i < jTable2.getRowCount(); i++) {
                Object p = jTable2.getValueAt(i, 4);
                penalty = Double.parseDouble(p.toString());
                sum = sum + penalty;
            }
            jLabelTotalPenalties.setText(df.format(sum));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return sum;
    }

    private void payPenaltyButtonEnableOrDisable() {
        try {
            if (jTable1.getRowCount() <1) {
                if (jTable2.getRowCount() > 0) {
                    jButtonPayPenalty.setEnabled(true);
                } else {
                    jButtonPayPenalty.setEnabled(false);
                }
            }else{
                jButtonPayPenalty.setEnabled(false);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @return the bookReadyToReturn
     */
    public static Boolean getBookReadyToReturn() {
        return bookReadyToReturn;
    }

    /**
     * @param aBookReadyToReturn the bookReadyToReturn to set
     */
    public static void setBookReadyToReturn(Boolean aBookReadyToReturn) {
        bookReadyToReturn = aBookReadyToReturn;
    }

}
